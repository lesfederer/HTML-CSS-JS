/*
var arr = [0,1,2,3.14,'Hello',null,true];
console.log(arr.length);
console.log(arr);
console.log(arr.unshift("A","B"))
console.log(arr);
console.log(arr.shift());
console.log(arr.sort());
console.log(arr.reverse());
console.log(arr);
console.log("删除的元素："+arr.splice(2,3,"Goole","Facebook"));
console.log(arr);
console.log(arr.splice(2,2));
console.log(arr.splice(2,0,"Goole","Facebook"));
console.log(arr);
var add = arr.concat([1,2,[3,7,8]])
console.log(add);
console.log(arr);
console.log(arr.join("-"))
console.log(add.join("~"))
var xiaoming = {
  name:'小明',
  birth:1993,
  school:'No.1 middle School',
  height:1.70,
  weight:64,
  score: null
};
console.log(xiaoming.name);
console.log(xiaoming.height);
var xiaohong = {
  name:'小红',
  'middle-school':'No.1 Middle School'
};
console.log(xiaohong['middle-school'])
console.log(xiaohong['name']);
console.log(xiaohong.name);
console.log(xiaoming.age);
xiaoming.age = 25;
console.log(xiaoming.age);
delete xiaoming.age;
console.log(xiaoming.age);
delete xiaoming.school1;
console.log('name' in xiaoming);
console.log('grade' in xiaoming);
console.log('toString' in xiaoming);//继承的
hasna = xiaoming.hasOwnProperty('name');
console.log(hasna);
console.log(xiaoming.hasOwnProperty('toSting'));
var age = 3;
if(age >= 18){
  alert('adult');
}else if(age>=5){
  alert('teenager');
}else{
  alert('kid')
}

var height = parseFloat(prompt('请输入身高(m):'));
var weight = parseFloat(prompt('请输入体重(kg):'));
var bmi = weight/(height*height);
if (bmi>32){
  console.log("严重肥胖");
}else if(bmi>28){
  console.log("肥胖");
}else if(bmi>25){
  console.log("过重");
}else if(bmi>18.5){
  console.log("正常")
}else{
  console.log("过轻")
}
*/
//'use strict';
/*var x=0;
for ( var i=1; i<=1000; i++){
  x=x+i;
}
console.log(x);

var arr = ['Apple','Goole','Microsoft'];
var i,x;
for(i=0;i<arr.length;i++){
  console.log(arr[i]);
}

var o ={
  name:'Jack',
  age:'20',
  city:'Beijing'
};
for(var key in o){
  console.log(key); //输出对象的所有属性
}

for (var key in o){
  if(o.hasOwnProperty(key)){
    console.log(key);  //过滤掉对象继承的属性
  }
}
*/
/*
var a =['A','B','C'];
for(var i in a){
  console.log(i); //输出的是string而不是number
  console.log(a[i]);
}

 var x=0;
var n=99;
while(n>0){
  x=x+n;
  n=n-2;
}
console.log(x)

var n=0;
do{
  n=n+1;
}while(n<100);
console.log(n);

//do...while...循环至少执行1次，而for和while循环可能一次都不执行。

var arr = ['Bart', 'Lisa', 'Adam'];
for (var i=0;i<arr.length;i++){   //正序遍历
  alert(`Hello,${arr[i]}!`);
}
for (var i=0;i<arr.length;i++){   //倒序遍历
  alert(`Hello,${arr[arr.length-1-i]}!`);
}  
*/

/*
var arr = ['Bart', 'Lisa', 'Adam'];
var i = 0;
while(i<arr.length)
{
  console.log("倒序："+arr[i]);
  i=i+1;
}
}

var m = new Map([['Michael',95],['Bob',75],['Tracy',85]]);
console.log(m.get('Michael'));
var m = new Map();
m.set('Adam',67);
m.set('Bob',59);
console.log(m.has('Adam'));
console.log(m.get('Adam'));
m.delete('Adam');
console.log(m.get('Adam'));


var m = new Map();
m.set('Adam',67);
m.set('Bob',59);
console.log(m.has('Adam'));

var s1 = new Set();
var s2 = new Set([1,2,3]);
var s = new Set([1,1,2,2,3,4,'3'])
console.log(s)
s.add(5);
console.log(s);

var a = ['A','B','C'];
var s = new Set(['A1','B1','C1']);
var m = new Map([[1,'x'],[2,'y'],[3,'z']]);
for(var x of a){
  console.log(x);
}
for(var x of s){
  console.log(x);
}for(var x of m){
  console.log(x[0] + '='+ x[1]);
}


var a = ['A','B','C'];
a.forEach(function(element, index, array){
          // element:指向当前元素的值
          // index: 指向当前索引
          // array: 指向Array对象本身
          console.log(element + ',index = '+ index);
          });
a.forEach((element, index, array)=>{
  console.log(element +':index='+index+'。array:'+array)
});

//Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身
var s = new Set(['A','B','C']);
s.forEach(function(element,sameElement, set){
  console.log(sameElement);
});
//Map的回调函数参数依次为value、key和map本身
var m = new Map([[1,'x'],[2,'y'],[3,'z']]);
m.forEach(function(value,key,map){
  console.log(key);
});
//某些参数不用，可以省略。
var a = ['A','B','C'];
a.forEach(function(element){
  console.log(element);
});
*/
////////////////////////////////////////////////////
//如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined
function abs(x){
  if(x>0){
    return x;
  }else{
    return -x;
  }
}
alert(abs(-10));















/**************************************************************************************************/
☆	出于性能考虑，<script>标签放在页面末尾最佳（即它后面紧跟着结束标签</body>）。可最大限度的提高页面的加载速度。
注释："//" 或 "/*  */"
属性type：指定script标签包含内容类型，对于JS，应设置为text/javascript。默认为JS，可省略。
属性src：使得将要包含在网页中的JavaScript脚本存储在独立的文件中，这种功能能让整个网站共享JavaScript代码。
如：<script src="http://www.example.com/script.js">

JavaScript文件的扩展名指定为.js。
每个语句最好以；结束。

javascript严格区分大小写。

NaN;       // NaN表示Not a Number，当无法计算结果时用NaN表示
Infinity;  // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity

☆	要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：

第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；

第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。

由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。

另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：
NaN === NaN; // false

唯一能判断NaN的方法是通过isNaN()函数：
isNaN(NaN); // true

最后要注意浮点数的相等比较：
1 / 3 === (1 - 2 / 3); // false
这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等

，只能计算它们之差的绝对值，看是否小于某个阈值：

Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true

avaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true。




















-->
