filter
:用于将Array的某些元素过滤掉，然后返回剩下的元素。筛选元素。
和map()类似，Array的filter()也接收一个函数。filter()把传入的函数依次作用于每个

元素，然后根据返回值是true还是false决定保留还是丢弃该元素。
回调函数
filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示

Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身

利用filter，可以巧妙地去除Array的重复元素：
'use strict';
var
    r,
    arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 

'orange', 'strawberry'];
r = arr.filter(function (element, index, self) {
    return self.indexOf(element) === index;
});
console.log(r.toString());

去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与

indexOf返回的位置不相等，因此被filter滤掉了

素数判断：
素数是指除了1和它本身以外，不能被任何整数整除的数，例如17就是素数，因为它不能

被2~16的任一整数整除。因此判断一个整数m是否是素数，只需把m被2~m-1之间的每一个

整数去除，如果都不能被整除，那么m就是一个素数
另外判断方法还可以简化。m不必呗2~m-1之间的每一个整数去除，只需被2~√m之间的每

一个整数去除就可以了。如果m不能被2~√m间任一整数整除，m必定是素数。

尝试用filter()筛选出素数：
function get_primes(arr) {
return arr.filter(function(element){
        if(element === 1)
           return false;
        for(var i=2;i<Math.sqrt(element+1);i++){
           if ((element%i) === 0){
               return false;
           }
        }
       return true;
});
}

// 测试:
var
    x,
    r,
    arr = [];
for (x = 1; x < 100; x++) {
    arr.push(x);
}
r = get_primes(arr);
if (r.toString() === [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 

53, 59, 61, 67, 71, 73, 79, 83, 89, 97].toString()) {
    console.log('测试通过!');
} else {
    console.log('测试失败: ' + r.toString());
}
sort
Array的sort()方法默认把所有元素先转换为String再排序
sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序
sort()方法会直接对Array进行修改，它返回的结果仍是当前Array
语法：
arr.sort() 
arr.sort(compareFunction)
参数：
compareFunction
可选。用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个

字符的Unicode位点进行排序。
返回值：
返回排序后的数组。原数组已经被排序后的数组代替。
描述：如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的

Unicode位点进行排序。例如 "Banana" 会被排列到 "cherry" 之前。当数字按由小到大

排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被

转换为字符串，所以在Unicode顺序上 "80" 要比 "9" 要靠前。
如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 

是两个将要被比较的元素：
•	如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；
•	如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： 

ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 

2003 年之前的版本）；
•	如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。
•	compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序

的结果将是不确定的。
所以，比较函数格式如下：
function compare(a, b) {
  if (a < b ) {           // 按某种排序标准进行比较, a 小于 b
    return -1;
  }
  if (a > b ) {
    return 1;
  }
  // a must be equal to b
  return 0;
}
要比较数字而非字符串，比较函数可以简单的以 a 减 b，如下的函数将会将数组升序排

列
function compareNumbers(a, b) {
  return a - b;
}
sort 方法可以使用 函数表达式 方便地书写：
var numbers = [4, 2, 5, 1, 3];
numbers.sort(function(a, b) {
  return a - b;
});
console.log(numbers);

也可以写成：
var numbers = [4, 2, 5, 1, 3]; 
numbers.sort((a, b) => a - b); 
console.log(numbers);

// [1, 2, 3, 4, 5]
对象可以按照某个属性排序：
var items = [
  { name: 'Edward', value: 21 },
  { name: 'Sharpe', value: 37 },
  { name: 'And', value: 45 },
  { name: 'The', value: -12 },
  { name: 'Magnetic' },
  { name: 'Zeros', value: 37 }
];

// sort by value
items.sort(function (a, b) {
  return (a.value - b.value)
});

// sort by name
items.sort(function(a, b) {
  var nameA = a.name.toUpperCase(); // ignore upper and lowercase
  var nameB = b.name.toUpperCase(); // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }

  // names must be equal
  return 0;
});

闭包：
闭包就是能够读取其他函数内部变量的函数。
由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简

单理解成"定义在一个函数内部的函数"。
所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。

闭包的用途
闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变

量，另一个就是让这些变量的值始终保持在内存中。
怎么来理解这句话呢？请看下面的代码。

　　function f1(){
　　　　var n=999;
　　　　nAdd=function(){n+=1}
　　　　function f2(){
　　　　　　alert(n);
　　　　}
　　　　return f2;
　　}
　　var result=f1();
　　result(); // 999
　　nAdd();
　　result(); // 1000

在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，

第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调

用后被自动清除。

为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始

终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾

回收机制（garbage collection）回收。

这段代码中另一个值得注意的地方，就是"nAdd=function(){n+=1}"这一行，首先在nAdd

前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值

是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd

相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。

使用闭包的注意点：
1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包

，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前

，将不使用的局部变量全部删除。

2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象

（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私

有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。

3）返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化

的变量.

箭头函数：
箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别

：箭头函数内部的this是词法作用域，由上下文确定。

请使用箭头函数简化排序时传入的函数：
'use strict'
var arr = [10, 20, 1, 2];
arr.sort((x, y) => y-x);
console.log(arr); // [1, 2, 10, 20]

generator（生成器）：可以返回多次。

函数在执行过程中，如果没有遇到return语句（函数末尾如果没有return，就是隐含的

return undefined;），控制权无法交回被调用的代码

function foo(x) {
	return x+x;
}
var r = foo(1);

generator由function*定义。并且，除了return语句，还可以用yield返回多次。
函数只能返回一次，所以必须返回一个Array。但是，如果换成generator，就可以一次返

回一个数，不断返回多次。

调用generator对象有两个方法，一是不断地调用generator对象的next()方法：
var f = fib(5);
f.next(); // {value: 0, done: false}
f.next(); // {value: 1, done: false}
f.next(); // {value: 1, done: false}
f.next(); // {value: 2, done: false}
f.next(); // {value: 3, done: false}
f.next(); // {value: undefined, done: true}

next()方法会执行generator的代码，然后，每次遇到yield x;就返回一个对象{value: 

x, done: true/false}，然后“暂停”。返回的value就是yield的返回值，done表示这个

generator是否已经执行结束了。如果done为true，则value就是return的返回值。

当执行到done为true时，这个generator对象就已经全部执行完毕，不要再继续调用next

()了。

第二个方法是直接用for ... of循环迭代generator对象，这种方式不需要我们自己判断

done：
'use strict'

function* fib(max) {
    var
        t,
        a = 0,
        b = 1,
        n = 0;
    while (n < max) {
        yield a;
        [a, b] = [b, a + b];
        n ++;
    }
    return;
}
for (var x of fib(10)) {
    console.log(x); // 依次输出0, 1, 1, 2, 3, ...
}

因为generator可以在执行过程中多次返回，所以它看上去就像一个可以记住执行状态的

函数，利用这一点，写一个generator就可以实现需要用面向对象才能实现的功能。例如

，用一个对象来保存状态，得这么写：

var fib = {
    a: 0,
    b: 1,
    n: 0,
    max: 5,
    next: function () {
        var
            r = this.a,
            t = this.a + this.b;
        this.a = this.b;
        this.b = t;
        if (this.n < this.max) {
            this.n ++;
            return r;
        } else {
            return undefined;
        }
    }
};
用对象的属性来保存状态，相当繁琐。

generator还有另一个巨大的好处，就是把异步回调代码变成“同步”代码。这个好处要

等到后面学了AJAX以后才能体会到。

要生成一个自增的ID，可以编写一个next_id()函数：

var current_id = 0;

function next_id() {
    current_id ++;
    return current_id;
}
由于函数无法保存状态，故需要一个全局变量current_id来保存数字。

不用闭包，试用generator改写：

'use strict';
function* next_id() {

    /*var current_id = 0;
    while(true){
      current_id = current_id+1;
      yield current_id;
    }*/
    var current_id = 1;
    while(true){
      yield current_id++;
    }
}

// 测试:
var
    x,
    pass = true,
    g = next_id();
for (x = 1; x < 100; x ++) {
    if (g.next().value !== x) {
        pass = false;
        console.log('测试失败!');
        break;
    }
}
if (pass) {
    console.log('测试通过!');
}

为了区分对象的类型，我们用typeof操作符获取对象的类型，它总是返回一个字符串。
number、string、boolean、function和undefined有别于其他类型。特别注意null的类型

是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常

意义上的object——{}。


包装对象：

除了这些类型外，JavaScript还提供了包装对象，熟悉Java的小伙伴肯定很清楚int和

Integer这种暧昧关系。

number、boolean和string都有包装对象。没错，在JavaScript中，字符串也区分string

类型和它的包装类型。包装对象用new创建：

var n = new Number(123); // 123,生成了新的包装类型
var b = new Boolean(true); // true,生成了新的包装类型
var s = new String('str'); // 'str',生成了新的包装类型
虽然包装对象看上去和原来的值一模一样，显示出来也是一模一样，但他们的类型已经变

为object了！所以，包装对象和原始值用===比较会返回false：

typeof new Number(123); // 'object'
new Number(123) === 123; // false

typeof new Boolean(true); // 'object'
new Boolean(true) === true; // false

typeof new String('str'); // 'object'
new String('str') === 'str'; // false


···JavaScript会使用时的几条规则：···

·不要使用new Number()、new Boolean()、new String()创建包装对象；

·用parseInt()或parseFloat()来转换任意类型到number；

·用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；

·通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；

·typeof操作符可以判断出number、boolean、string、function和undefined；

·判断Array要使用Array.isArray(arr)；

·判断null请使用myVar === null；

·判断某个全局变量是否存在用typeof window.myVar === 'undefined'；

·函数内部判断某个变量是否存在用typeof myVar === 'undefined'。

任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要

除外，虽然null还伪装成了object类型。

更细心的同学指出，number对象调用toString()报SyntaxError：

123.toString(); // SyntaxError
遇到这种情况，要特殊处理一下：

123..toString(); // '123', 注意是两个点！
(123).toString(); // '123'

···Date···

在JavaScript中，Date对象用来表示日期和时间。

要获取系统当前时间，用：

var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳
注意，当前时间是浏览器从本机操作系统获取的时间，所以不一定准确，因为用户可以把

当前时间设定为任何值。

如果要创建一个指定日期和时间的Date对象，可以用：

var d = new Date(2015, 5, 19, 20, 15, 30, 123);
d; // Fri Jun 19 2015 20:15:30 GMT+0800 (CST)
你可能观察到了一个非常非常坑爹的地方，就是JavaScript的月份范围用整数表示是0~11

，0表示一月，1表示二月……，所以要表示6月，我们传入的是5！这绝对是JavaScript的

设计者当时脑抽了一下，但是现在要修复已经不可能了。

 JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。
第二种创建一个指定日期和时间的方法是解析一个符合ISO 8601格式的字符串：

var d = Date.parse('2015-06-24T19:49:22.875+08:00');
d; // 1435146562875
但它返回的不是Date对象，而是一个时间戳。不过有时间戳就可以很容易地把它转换为一

个Date：

var d = new Date(1435146562875);
d; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
d.getMonth(); // 5
 使用Date.parse()时传入的字符串使用实际月份01~12，转换为Date对象后getMonth()获

取的月份值为0~11。
时区
Date对象表示的时间总是按浏览器所在时区显示的，不过我们既可以显示本地时间，也可

以显示调整后的UTC时间：

var d = new Date(1435146562875);
d.toLocaleString(); // '2015/6/24 下午7:49:22'，本地时间（北京时区+8:00），显

示的字符串与操作系统设定的格式有关
d.toUTCString(); // 'Wed, 24 Jun 2015 11:49:22 GMT'，UTC时间，与本地时间相差8

小时
那么在JavaScript中如何进行时区转换呢？实际上，只要我们传递的是一个number类型的

时间戳，我们就不用关心时区转换。任何浏览器都可以把一个时间戳正确转换为本地时间

。

时间戳是个什么东西？时间戳是一个自增的整数，它表示从1970年1月1日零时整的GMT时

区开始的那一刻，到现在的毫秒数。假设浏览器所在电脑的时间是准确的，那么世界上无

论哪个时区的电脑，它们此刻产生的时间戳数字都是一样的，所以，时间戳可以精确地表

示一个时刻，并且与时区无关。

所以，我们只需要传递时间戳，或者把时间戳从数据库里读出来，再让JavaScript自动转

换为当地时间就可以了。

要获取当前时间戳，可以用：

'use strict';

if (Date.now) {
    console.log(Date.now()); // 老版本IE没有now()方法
} else {
    console.log(new Date().getTime());
}

